"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Loader2, MapPin, AlertTriangle } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"

// Define the traffic hotspot data type
interface TrafficHotspot {
  id: string
  location: {
    lat: number
    lng: number
  }
  name: string
  severity: "low" | "medium" | "high"
  speedLimit: number
  averageSpeed: number
  description: string
}

// Mock data for traffic hotspots
const mockHotspots: TrafficHotspot[] = [
  {
    id: "hotspot-1",
    location: { lat: 40.7128, lng: -74.006 }, // New York
    name: "Downtown Intersection",
    severity: "high",
    speedLimit: 35,
    averageSpeed: 48,
    description: "Major intersection with frequent speed violations and high traffic density",
  },
  {
    id: "hotspot-2",
    location: { lat: 40.7282, lng: -73.994 }, // Near New York
    name: "Highway Entrance",
    severity: "medium",
    speedLimit: 55,
    averageSpeed: 62,
    description: "Highway entrance with moderate speed violations during rush hour",
  },
  {
    id: "hotspot-3",
    location: { lat: 40.7059, lng: -74.0088 }, // Near New York
    name: "School Zone",
    severity: "high",
    speedLimit: 25,
    averageSpeed: 38,
    description: "School zone with frequent speed violations during school hours",
  },
  {
    id: "hotspot-4",
    location: { lat: 40.7219, lng: -73.9877 }, // Near New York
    name: "Residential Area",
    severity: "low",
    speedLimit: 30,
    averageSpeed: 33,
    description: "Residential area with occasional speed violations",
  },
  {
    id: "hotspot-5",
    location: { lat: 40.7302, lng: -74.0123 }, // Near New York
    name: "Shopping District",
    severity: "medium",
    speedLimit: 30,
    averageSpeed: 42,
    description: "Shopping district with moderate traffic density and speed violations",
  },
]

// Declare google variable
declare global {
  interface Window {
    google: any
    initMap: () => void
  }
}

export function TrafficHotspotMap() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedHotspot, setSelectedHotspot] = useState<TrafficHotspot | null>(null)
  const [map, setMap] = useState<google.maps.Map | null>(null)
  const [markers, setMarkers] = useState<google.maps.Marker[]>([])
  const [heatmap, setHeatmap] = useState<google.maps.visualization.HeatmapLayer | null>(null)
  const mapRef = useRef<HTMLDivElement>(null)
  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY

  // Initialize the map
  const initializeMap = useCallback(() => {
    if (!mapRef.current) return

    try {
      const mapOptions: google.maps.MapOptions = {
        center: { lat: 40.7128, lng: -74.006 }, // New York as default center
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true,
        zoomControl: true,
      }

      const newMap = new window.google.maps.Map(mapRef.current, mapOptions)
      setMap(newMap)

      // Create markers for each hotspot
      const newMarkers = mockHotspots.map((hotspot) => {
        const marker = new window.google.maps.Marker({
          position: hotspot.location,
          map: newMap,
          title: hotspot.name,
          icon: {
            path: window.google.maps.SymbolPath.CIRCLE,
            fillColor: hotspot.severity === "high" ? "#ef4444" : hotspot.severity === "medium" ? "#f59e0b" : "#22c55e",
            fillOpacity: 0.7,
            strokeWeight: 2,
            strokeColor: "#ffffff",
            scale: 10,
          },
        })

        // Add click event to marker
        marker.addListener("click", () => {
          setSelectedHotspot(hotspot)
          newMap.setCenter(hotspot.location)
          newMap.setZoom(15)
        })

        return marker
      })

      setMarkers(newMarkers)

      // Create heatmap layer
      const heatmapData = mockHotspots.map((hotspot) => {
        return {
          location: new window.google.maps.LatLng(hotspot.location.lat, hotspot.location.lng),
          weight: hotspot.severity === "high" ? 10 : hotspot.severity === "medium" ? 5 : 2,
        }
      })

      const newHeatmap = new window.google.maps.visualization.HeatmapLayer({
        data: heatmapData,
        map: newMap,
        radius: 30,
        gradient: [
          "rgba(0, 255, 255, 0)",
          "rgba(0, 255, 255, 1)",
          "rgba(0, 191, 255, 1)",
          "rgba(0, 127, 255, 1)",
          "rgba(0, 63, 255, 1)",
          "rgba(0, 0, 255, 1)",
          "rgba(0, 0, 223, 1)",
          "rgba(0, 0, 191, 1)",
          "rgba(0, 0, 159, 1)",
          "rgba(0, 0, 127, 1)",
          "rgba(63, 0, 91, 1)",
          "rgba(127, 0, 63, 1)",
          "rgba(191, 0, 31, 1)",
          "rgba(255, 0, 0, 1)",
        ],
      })

      setHeatmap(newHeatmap)
      setLoading(false)
    } catch (err) {
      console.error("Error initializing map:", err)
      setError("Failed to initialize map. Please try again.")
      setLoading(false)
    }
  }, [])

  // Load Google Maps API
  useEffect(() => {
    if (!apiKey) {
      setError("Google Maps API key is missing. Please check your environment variables.")
      setLoading(false)
      return
    }

    // Check if Google Maps API is already loaded
    if (window.google && window.google.maps) {
      initializeMap()
      return
    }

    // Load Google Maps API
    const script = document.createElement("script")
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=visualization&callback=initMap`
    script.async = true
    script.defer = true
    window.initMap = initializeMap

    script.onerror = () => {
      setError("Failed to load Google Maps API. Please check your internet connection and API key.")
      setLoading(false)
    }

    document.head.appendChild(script)

    return () => {
      // Clean up
      window.initMap = undefined
      if (script.parentNode) {
        script.parentNode.removeChild(script)
      }
    }
  }, [apiKey, initializeMap])

  // Toggle heatmap visibility
  const toggleHeatmap = () => {
    if (heatmap) {
      heatmap.setMap(heatmap.getMap() ? null : map)
    }
  }

  // Open in Google Maps
  const openInGoogleMaps = () => {
    if (selectedHotspot) {
      const { lat, lng } = selectedHotspot.location
      window.open(`https://www.google.com/maps/search/?api=1&query=${lat},${lng}`, "_blank")
    } else {
      // Open default map view if no hotspot is selected
      window.open("https://www.google.com/maps/search/?api=1&query=traffic+hotspots", "_blank")
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Traffic Hotspot Map</span>
          <Button variant="outline" size="sm" onClick={openInGoogleMaps}>
            Open in Google Maps
          </Button>
        </CardTitle>
        <CardDescription>View and analyze high traffic areas and speed violation hotspots</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {error && (
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="flex space-x-2 mb-2">
          <Button variant="outline" size="sm" onClick={toggleHeatmap}>
            Toggle Heatmap
          </Button>
          {selectedHotspot && (
            <Button variant="outline" size="sm" onClick={() => setSelectedHotspot(null)}>
              Clear Selection
            </Button>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="md:col-span-2">
            {loading ? (
              <div className="h-[400px] flex items-center justify-center bg-gray-100 rounded-md">
                <div className="text-center">
                  <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2" />
                  <p>Loading map...</p>
                </div>
              </div>
            ) : (
              <div ref={mapRef} className="h-[400px] rounded-md" />
            )}
          </div>

          <div>
            <Card>
              <CardHeader className="py-3">
                <CardTitle className="text-lg">Hotspot Details</CardTitle>
              </CardHeader>
              <CardContent>
                {selectedHotspot ? (
                  <div className="space-y-3">
                    <div>
                      <h3 className="font-medium flex items-center">
                        <MapPin className="h-4 w-4 mr-1" />
                        {selectedHotspot.name}
                      </h3>
                      <p className="text-sm text-muted-foreground">{selectedHotspot.description}</p>
                    </div>

                    <div className="grid grid-cols-2 gap-2">
                      <div className="bg-gray-100 p-2 rounded-md">
                        <p className="text-xs text-muted-foreground">Speed Limit</p>
                        <p className="font-medium">{selectedHotspot.speedLimit} mph</p>
                      </div>
                      <div className="bg-gray-100 p-2 rounded-md">
                        <p className="text-xs text-muted-foreground">Average Speed</p>
                        <p className="font-medium">{selectedHotspot.averageSpeed} mph</p>
                      </div>
                    </div>

                    <div>
                      <p className="text-xs text-muted-foreground mb-1">Severity</p>
                      <div
                        className={`px-2 py-1 rounded-full text-xs inline-flex items-center ${
                          selectedHotspot.severity === "high"
                            ? "bg-red-100 text-red-800"
                            : selectedHotspot.severity === "medium"
                              ? "bg-yellow-100 text-yellow-800"
                              : "bg-green-100 text-green-800"
                        }`}
                      >
                        <span
                          className={`h-2 w-2 rounded-full mr-1 ${
                            selectedHotspot.severity === "high"
                              ? "bg-red-500"
                              : selectedHotspot.severity === "medium"
                                ? "bg-yellow-500"
                                : "bg-green-500"
                          }`}
                        ></span>
                        {selectedHotspot.severity.charAt(0).toUpperCase() + selectedHotspot.severity.slice(1)}
                      </div>
                    </div>

                    <Button size="sm" className="w-full" onClick={openInGoogleMaps}>
                      View in Google Maps
                    </Button>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <MapPin className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                    <p className="text-muted-foreground">Select a hotspot on the map to view details</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <div className="mt-4">
              <h3 className="text-sm font-medium mb-2">Legend</h3>
              <div className="space-y-2">
                <div className="flex items-center">
                  <span className="h-3 w-3 rounded-full bg-red-500 mr-2"></span>
                  <span className="text-sm">High Severity</span>
                </div>
                <div className="flex items-center">
                  <span className="h-3 w-3 rounded-full bg-yellow-500 mr-2"></span>
                  <span className="text-sm">Medium Severity</span>
                </div>
                <div className="flex items-center">
                  <span className="h-3 w-3 rounded-full bg-green-500 mr-2"></span>
                  <span className="text-sm">Low Severity</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
